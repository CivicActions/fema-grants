<?php

/**
 * @file
 * Contains field_group_ajaxified_multipage.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityFormInterface;

/**
 * Implements hook_help().
 */
function field_group_ajaxified_multipage_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the field_group_ajaxified_multipage module.
    case 'help.page.field_group_ajaxified_multipage':
      $url = Url::fromRoute('fgam_example.example');
      $link = \Drupal::l(t('Example form ajaxified'), $url);
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Turns javascript multipage groups to ajaxified version') . '</p>';
      $output .= '<p>' . t('Form example:') . $link . '</br><b>' . t('Before use this example, please enable fgam_example module.') . '</b></p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function field_group_ajaxified_multipage_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['field_group_ajaxified_multipage'])) {
      $group = $implementations['field_group_ajaxified_multipage'];
      unset($implementations['field_group_ajaxified_multipage']);
      $implementations['field_group_ajaxified_multipage'] = $group;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function field_group_ajaxified_multipage_form_alter(&$form, &$form_state, $form_id, $no_js_use = FALSE) {
  // Check form array to see if it has multipage group.
  $is_multi_page = FALSE;
  $scroll_top = FALSE;
  $button_label_next = '';
  $button_label_prev = '';
  $page_group = [];

  // Extract fieldgroups from custom forms.
  if (isset($form['#groups_custom'])) {
    $form['#fieldgroups'] = $form['#groups_custom'];
  }

  // Check if there are fieldgroups in the form.
  if (isset($form['#fieldgroups'])) {
    $a_group = reset($form['#fieldgroups']);
  }

  if (isset($a_group)) {
    if (is_array($a_group) || is_object($a_group)) {
      $groups = [];
      $page_group = NULL;
      $n = 0;
      foreach ($form['#fieldgroups'] as $key => $_group) {
        if (is_object($_group)) {
          $_group = [
            'name' => $key,
            'format_type' => $_group->format_type,
            'label' => $_group->label,
            'format_settings' => $_group->format_settings,
            'children' => $_group->children,
            'weight' => $_group->weight,
          ];
        }

        if (is_array($_group)) {
          if (!isset($_group['weight'])) {
            $_group['weight'] = $n;
            $form['#fieldgroups'][$key]['weight'] = $n;
          }

          if ($_group['format_type'] == 'multipage_group' && ($_group['format_settings']['ajaxify'] || $_group['format_settings']['nonjs_multistep']) && empty($page_group)) {
            $is_multi_page = TRUE;
            $page_group = $_group;

            // Button labels.
            if (isset($_group['format_settings']['button_label'])) {
              if ($_group['format_settings']['button_label'] == 1) {
                $button_label_next = t('@label', ['@label' => $_group['format_settings']['button_label_next']]);
                $button_label_prev = t('@label', ['@label' => $_group['format_settings']['button_label_prev']]);
              }
            }
          }
          // Scroll Top.
          if (isset($_group['format_settings']['scroll_top'])) {
            if ($_group['format_settings']['scroll_top'] == 1) {
              $scroll_top = TRUE;
            }
          }

          $groups[$key] = $_group;
          $n++;
        }
      }
    }
  }

  // Ajaxify multipage group.
  if ($is_multi_page) {
    $form_state->set('field_group_ajaxified_multipage_enabled', $is_multi_page);

    $form_state->set('field_group_ajaxified_multipage_group', $page_group);

    $form_state->set('field_group_ajaxified_multipage_complete_form', []);

    // Sort groups by weight.
    if (!function_exists('__field_group_ajaxified_multipage_groups_by_weight')) {
      global $__field_group_ajaxified_multipage_groups_by_weight_groups;
      $__field_group_ajaxified_multipage_groups_by_weight_groups = $groups;

      /**
       * Sort groups by weight.
       */
      function __field_group_ajaxified_multipage_groups_by_weight($a, $b) {
        global $__field_group_ajaxified_multipage_groups_by_weight_groups;

        if (is_array($a)) {
          return $a['weight'] > $b['weight'];
        }
        elseif (is_object($a)) {
          return $a->weight > $b->weight;
        }
        else {
          return $__field_group_ajaxified_multipage_groups_by_weight_groups[$a]['weight'] > $__field_group_ajaxified_multipage_groups_by_weight_groups[$b]['weight'];
        }
      }

    }

    $step = empty($form_state->get('field_group_ajaxified_multipage_step')) ? 1 : $form_state->get('field_group_ajaxified_multipage_step');
    $form_state->set('field_group_ajaxified_multipage_step', $step);

    uasort($form['#fieldgroups'], '__field_group_ajaxified_multipage_groups_by_weight');
    usort($page_group['children'], '__field_group_ajaxified_multipage_groups_by_weight');
    if (!empty($page_group['name'])) {
      usort($form['#fieldgroups'][$page_group['name']]->children, '__field_group_ajaxified_multipage_groups_by_weight');
    }
    uasort($groups, '__field_group_ajaxified_multipage_groups_by_weight');

    $wrapper_id = 'form-ajax-wrapper';
    if (isset($form['#id'])) {
      $wrapper_id = $form['#id'] . '-' . $wrapper_id;
    }

    $form['#prefix'] = '<div id="' . $wrapper_id . '" >';
    $form['#suffix'] = '</div>';

    if ($scroll_top) {
      $form['#attached']['library'][] = 'field_group_ajaxified_multipage/field_group_ajaxified_multipage';
      $form['#attributes']['class'][] = 'field-group-ajaxifield-multipage-scroll';
    }
    if ($step == 1 && (empty($form_state->get('field_group_ajaxified_multipage_scroll')) && !$form_state->get('field_group_ajaxified_multipage_scroll'))) {
      $form['#attributes']['class'][] = 'prevent-scroll';
    }
    if ($step > 1 || (!empty($form_state->get('field_group_ajaxified_multipage_scroll')) && $form_state->get('field_group_ajaxified_multipage_scroll'))) {
      $scroll = empty($form_state->get('field_group_ajaxified_multipage_scroll')) ? 1 : $form_state->get('field_group_ajaxified_multipage_scroll');
      $form_state->set('field_group_ajaxified_multipage_scroll', $scroll);
    }

    // Convert page group formats to fieldset.
    $form_state->set('field_group_ajaxified_multipage_complete_form', $form);
    $n = 0;
    foreach ($groups as $group_name => $group) {
      if (in_array($group_name, $page_group['children'])) {
        $n++;
        $group['format_type'] = 'fieldset';
        if (isset($form['#fieldgroups'])) {
          if (is_object($form['#fieldgroups'][$group_name])) {
            $form['#fieldgroups'][$group_name]->format_type = $group['format_type'];
          }
          else {
            $form['#fieldgroups'][$group_name]['format_type'] = $group['format_type'];
          }
        }
        if ($n != $step) {
          _field_group_ajaxified_multipage_field_unset($group['children'], $form);
        }
      }
    }

    $step_label = $groups[$page_group['children'][$step - 1]]['label'];
    // Add header.
    // Create a page title from the label.
    $page_header = isset($page_group['format_settings']['page_header']) ? $page_group['format_settings']['page_header'] : 3;
    switch ($page_header) {
      case 1:
        $title = $step_label;
        break;

      case 2:
        $title = t('Step %count of %total', [
          '%count' => $step,
          '%total' => count($page_group['children']),
        ]);
        break;

      case 3:
        $title = t('Step %count of %total @label', [
          '%count' => $step,
          '%total' => count($page_group['children']),
          '@label' => $step_label,
        ]);
        break;

      case 0:
      default:
        $title = '';
        break;
    }
    if (!isset($form['#attributes'])) {
      $form['#attributes'] = [];
    }
    $classes = "";
    for ($i = 0; $i < count($form['#attributes']['class']); $i++) {
      $classes .= " ." . $form['#attributes']['class'][$i];
    }
    $output = '<div class="' . $classes . '">';
    if (!empty($step_label)) {

      // Always wrap fieldset legends in a SPAN for CSS positioning.
      $output .= '<h2 class="multipage-pane-title"><span>' . $title . '</span></h2>';
    }

    $output .= '</div>';
    $form['paging_header'] = [
      '#type' => 'item',
      '#markup' => $output,
      '#weight' => -1,
    ];

    // Add footer.
    $page_counter_format = isset($page_group['format_settings']['page_counter']) ? $page_group['format_settings']['page_counter'] : 1;
    $output = '<div class="fieldset-wrapper multipage-pane-wrapper">';
    if ($page_counter_format == 1) {
      $output .= t('<span class="multipage-counter_ajax">%count / %total</span>', [
        '%count' => $step,
        '%total' => count($page_group['children']),
      ]);
    }
    elseif ($page_counter_format == 2) {
      $output .= t('<span class="multipage-counter_ajax">%count</span>', ['%count' => $step]);
    }
    $output .= '</div>';
    $form['paging_footer'] = [
      '#type' => 'markup',
      '#markup' => $output,
      '#weight' => 19,
    ];

    // Add navigation buttons.
    if ($step < count($page_group['children'])) {
      $form['actions']['next'] = [
        '#type' => 'submit',
        '#value' => !empty($button_label_next) ? $button_label_next : t("Next step"),
        '#validate' => ['_field_group_ajaxified_multipage_form_validate'],
        '#weight' => 21,
        '#ajax' => [
          'wrapper' => $wrapper_id,
          'method' => 'replace',
          'callback' => '_field_group_ajaxified_multipage_form_callback',
          'effect' => 'fade',
        ],
      ];
    }
    if ($step > 1) {
      $form['actions']['prev'] = [
        '#type' => 'submit',
        '#value' => !empty($button_label_prev) ? $button_label_prev : t("Previous step"),
        // Since all info will be discarded, don't validate on 'prev'.
        '#limit_validation_errors' => [],
        '#weight' => 20,
        // #submit is required to use #limit_validation_errors.
        '#submit' => ['_field_group_ajaxified_multipage_form_submit'],
        '#ajax' => [
          'wrapper' => $wrapper_id,
          'callback' => '_field_group_ajaxified_multipage_form_callback',
        ],
      ];
    }

    $form['actions']['preview'] ? $form['actions']['preview']['#weight'] = 22 : NULL;
    $form['actions']['submit'] ? $form['actions']['submit']['#weight'] = 23 : NULL;

    // Display submit button on the last step.
    if (isset($form['#submit'])) {
      array_unshift($form['#submit'], '_field_group_ajaxified_multipage_form_submit');
    }
    if (isset($form['actions']['submit']['#submit'])) {
      array_unshift($form['actions']['submit']['#submit'], '_field_group_ajaxified_multipage_form_submit');
    }

    if ($step != count($page_group['children']) && $page_group['format_settings']['move_button']) {
      unset($form['actions']['submit']);
      unset($form['actions']['preview']);
    }

    // This simply allows us to demonstrate no-javascript use without
    // actually turning off javascript in the browser. Removing the #ajax
    // element turns off AJAX behaviors on that element and as a result
    // ajax.js doesn't get loaded.
    // For demonstration only! You don't need this.
    if ($no_js_use || !@$page_group['format_settings']['ajaxify']) {

      // Remove the #ajax from the above, so ajax.js won't be loaded.
      // For demonstration only.
      unset($form['next']['#ajax']);
      unset($form['prev']['#ajax']);
      unset($form['actions']['next']['#ajax']);
      unset($form['actions']['prev']['#ajax']);
    }
    if ($form_state->getFormObject() instanceof EntityForm) {
      $n = $form_state->getFormObject()->getEntity();
    }

    // Allow thirdparty modules to alter the altered form array.
    // $hooks = array('field_group_ajaxified_multipage_form');
    // if (isset($form_state['build_info']['base_form_id'])) {
    // $hooks[] = 'form_' . $form_state['build_info']['base_form_id'];
    // }
    // $hooks[] = 'field_group_ajaxified_multipage_form_' . $form_id;
    // Allow others to alter the pre_render.
    // Drupal::moduleHandler()->alter($hooks, $form, $form_state, $form_id);
    // drupal_alter($hooks, $form, $form_state, $form_id);.
  }
}

/**
 * Ajax callback for ajaxified form.
 *
 * @param.array $form
 * @param.FormStateInterface $form_state
 *
 * @return.array form
 */
function _field_group_ajaxified_multipage_form_callback(array &$form, FormStateInterface $form_state) {
  return $form;
}

/**
 * Scroll to top of the current view.
 *
 * @param.string $selector
 *
 * @return.array $command
 *   An array suitable for use with the ajax_render() function.
 */
function field_group_ajaxified_multipage_ajax_command_scroll_top($selector) {
  $command = [
    'command' => 'fgScrollTop',
    'selector' => $selector,
  ];
  return $command;
}

/**
 * Validate function for ajaxified form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 */
function _field_group_ajaxified_multipage_form_validate($form, &$form_state) {
  $entity_form = $form_state->getFormObject();

  if ($entity_form instanceof EntityFormInterface) {
    $entity_updated = $entity_form->buildEntity($form, $form_state);
    $entity_form->setEntity($entity_updated);
  }

  $parents_reverse = [];

  if (!is_null($form_state->getTriggeringElement())) {
    $triggeringelement = $form_state->getTriggeringElement();
    $parents_reverse = array_reverse($triggeringelement['#array_parents']);
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if (!isset($parents_reverse[1])) {
    $parents_reverse[1] = '';
  }
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'next' || $parents_reverse[0] == 'skip')) {
    $increment = $form_state->get('field_group_ajaxified_multipage_step');
    $increment++;
    $form_state->set('field_group_ajaxified_multipage_step', $increment);
  }
  if (!is_null($form_state->getValues())) {
    $values = $form_state->getValues();
    $allval = [];
    if (!is_null($form_state->get('all'))) {
      $allval = $form_state->get('all');
    }
    foreach ($values as $key => $value) {
      if (!empty($value) && is_string($value) && strpos($key, 'form') === FALSE) {
        $allval['values'][$key] = $value;
      }
    }
    $form_state->set('all', $allval);
  }
  // If they're done, submit.
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'submit')) {
    $form_state->setRebuild(FALSE);
    return;
  }

  // Otherwise, we still have work to do.
  $form_state->setRebuild(TRUE);
}

/**
 * Submit function for ajaxified form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 */
function _field_group_ajaxified_multipage_form_submit($form, &$form_state) {
  $parents_reverse = [];
  if (!is_null($form_state->getTriggeringElement())) {
    $triggeringelement = $form_state->getTriggeringElement();
    $parents_reverse = array_reverse($triggeringelement['#array_parents']);
  }
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'prev')) {

    /*
     * @todo : when going back to previous step , clear the current step values
     * to start fresh
     *         when returning back. should be configurable
     */
    $decrement = $form_state->get('field_group_ajaxified_multipage_step');
    $decrement--;
    $form_state->set('field_group_ajaxified_multipage_step', $decrement);
  }

  // If they're done, submit.
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'submit')) {
    if (!is_null($form_state->getValues())) {
      $values = $form_state->getValues();
      $allval = [];
      if (!is_null($form_state->get('all'))) {
        $allval = $form_state->get('all');
      }
      foreach ($values as $key => $value) {
        if (!empty($value) && is_string($value) && strpos($key, 'form') === FALSE) {
          $allval['values'][$key] = $value;
        }
      }
      $form_state->set('all', $allval);
    }
    $form_state->setRebuild(FALSE);
    return;
  }

  // Otherwise, we still have work to do.
  $form_state->setRebuild(TRUE);
}

/**
 * Hides field groups including children in a render array.
 *
 * @param array $element
 *   A render array. Can be a form, node, user, ...
 * @param array $group_names
 *   An array of field group names that should be hidden.
 */
function _field_group_ajaxified_multipage_hide_field_groups(array &$element, array $group_names) {
  foreach ($group_names as $group_name) {
    if (isset($element['#fieldgroups'][$group_name]) && isset($element['#group_children'])) {
      // Hide the field group.
      $element['#fieldgroups'][$group_name]->format_type = 'hidden';
      // Hide the elements inside the field group.
      $sub_groups = [];
      foreach (array_keys($element['#group_children'], $group_name) as $field_name) {
        if (isset($element['#fieldgroups'][$field_name])) {
          $sub_groups[] = $field_name;
        }
        else {
          $element[$field_name]['#access'] = FALSE;
        }
      }
      _field_group_ajaxified_multipage_hide_field_groups($element, $sub_groups);
    }
  }
}

/**
 * Helper function to recursively go though and unset field_group elements.
 *
 * Also their fields when they aren't visible to the current step.
 */
function _field_group_ajaxified_multipage_field_unset($children, &$form) {
  foreach ($children as $child_name) {
    // Child to step is a group it self.
    if (isset($form['#fieldgroups'][$child_name])) {
      // Walk down the tree of branched field_groups.
      _field_group_ajaxified_multipage_field_unset(
        $form['#fieldgroups'][$child_name]->children, $form);

      _field_group_ajaxified_multipage_hide_field_groups($form, [
        $child_name,
      ]);

    }
    else {
      $form[$child_name]['#access'] = FALSE;
    }
  }
}
